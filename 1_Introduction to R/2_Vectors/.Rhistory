# Factor
temperature_factor <- factor(temperature_vector, order=TRUE, levels = c('low', 'mid', 'high'))
# Print factor
temperature_factor
# Code to build factor_survey_vector
survey_vector <- c("M", "F", "F", "M", "M")
factor_survey_vector <- factor(survey_vector)
# Specify the levels of factor_survey_vector
# Important Note:  we specified Female before Male because factors is ordered alphabetically
levels(factor_survey_vector) <- c("Female", "Male")
factor_survey_vector
# Code to build factor_survey_vector
survey_vector <- c("M", "F", "F", "M", "M")
factor_survey_vector <- factor(survey_vector)
factor_survey_vector
# Specify the levels of factor_survey_vector
# Important Note:  we specified Female before Male because factors is ordered alphabetically
levels(factor_survey_vector) <- c("Female", "Male")
factor_survey_vector
# Code to build factor_survey_vector
survey_vector <- c("M", "F", "F", "M", "M")
factor_survey_vector <- factor(survey_vector)
factor_survey_vector
# Specify the levels of factor_survey_vector
# Important Note:  we specified Female before Male because factors is ordered alphabetically
levels(factor_survey_vector) <- c("Female", "Male")
factor_survey_vector
# Build factor_survey_vector with clean levels
survey_vector <- c("M", "F", "F", "M", "M")
factor_survey_vector <- factor(survey_vector)
levels(factor_survey_vector) <- c("Female", "Male")
factor_survey_vector
# Generate summary for survey_vector
summary(survey_vector)
# Generate summary for factor_survey_vector
summary(factor_survey_vector)
# Create factor_speed_vector
speed_vector <- c("medium", "slow", "slow", "medium", "fast")
factor_speed_vector <- factor(speed_vector, ordered = TRUE, levels = c("slow", "medium", "fast"))
# Factor value for second data analyst
da2 <- factor_speed_vector[2]
# Factor value for fifth data analyst
da5 <- factor_speed_vector[5]
# Is data analyst 2 faster than data analyst 5?
da2 > da5
mtcars
head(mtcars)
data()
data
data()
UCBAdmissions()
UCBAdmissions()
UCBAdmissions
mtcars
class(mtcars)
class(mtcars) == "data.frame"
class(mtcars) == "data.frame"
summary(mtcars)
class(mtcars)
vector <- c(1,2,3,4,5,6)
?matrix
number_vector <- c(1,2,3,4,5,6)
number_matrix <- matrix(number_vector, nrow = 3, byrow= TRUE)
number_vector <- c(1,2,3,4,5,6)
number_matrix <- matrix(number_vector, nrow = 3, byrow= TRUE)
number_matrix
mtcars
class(m)
class(mtcars)
class(mtcars)
?head
head(mtcars)
head(mtcars)
head(mtcars)
head(mtcars)
tail(mtcars)
tail(mtcars)
str(mtcars)
# Definition of vectors
name <- c("Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune")
type <- c("Terrestrial planet", "Terrestrial planet", "Terrestrial planet",
"Terrestrial planet", "Gas giant", "Gas giant", "Gas giant", "Gas giant")
diameter <- c(0.382, 0.949, 1, 0.532, 11.209, 9.449, 4.007, 3.883)
rotation <- c(58.64, -243.02, 1, 1.03, 0.41, 0.43, -0.72, 0.67)
rings <- c(FALSE, FALSE, FALSE, FALSE, TRUE, TRUE, TRUE, TRUE)
# Create a data frame from the vectors
planets_df <- data.frame(name, type, diameter, rotation, rings)
# Now, let us invoke planets_df to see the constructed data frame
plenets_df
# Definition of vectors
name <- c("Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune")
type <- c("Terrestrial planet", "Terrestrial planet", "Terrestrial planet",
"Terrestrial planet", "Gas giant", "Gas giant", "Gas giant", "Gas giant")
diameter <- c(0.382, 0.949, 1, 0.532, 11.209, 9.449, 4.007, 3.883)
rotation <- c(58.64, -243.02, 1, 1.03, 0.41, 0.43, -0.72, 0.67)
rings <- c(FALSE, FALSE, FALSE, FALSE, TRUE, TRUE, TRUE, TRUE)
# Create a data frame from the vectors
planets_df <- data.frame(name, type, diameter, rotation, rings)
# Now, let us invoke planets_df to see the constructed data frame
planets_df
# Definition of vectors
name <- c("Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune")
type <- c("Terrestrial planet", "Terrestrial planet", "Terrestrial planet",
"Terrestrial planet", "Gas giant", "Gas giant", "Gas giant", "Gas giant")
diameter <- c(0.382, 0.949, 1, 0.532, 11.209, 9.449, 4.007, 3.883)
rotation <- c(58.64, -243.02, 1, 1.03, 0.41, 0.43, -0.72, 0.67)
rings <- c(FALSE, FALSE, FALSE, FALSE, TRUE, TRUE, TRUE, TRUE)
# Create a data frame from the vectors
planets_df <- data.frame(name, type, diameter, rotation, rings)
# Now, let us invoke planets_df to see the constructed data frame
planets_df
# Print out diameter of Mercury (row 1, column 3)
planets_df[1,3]
# Print out data for Mars (entire fourth row)
planets_df[4,]
# Print out diameter of Mercury (row 1, column 3)
planets_df[1,3]
# Print out data for Mars (entire fourth row)
planets_df[4,]
# Print out data for Mars (entire fourth row)
planets_df[4,]
# Print out diameter of Mercury (row 1, column 3)
planets_df[1,3]
str(planets_df)
str(planets_df)
# Select first 5 values of diameter column
planets_df[1:5,"diameter"]
# Select first 5 values of diameter column
planets_df[1:5,c("diameter","name")]
# Select first 5 values of diameter column
planets_df[1:5,c("name","diameter")]
planets_df$diameter
typeof(planets_df$diameter)
class(planets_df$diameter)
is.vector(planets_df$diameter)
planets_df$diameter
has_rings <- c(FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE)
has_rings <- c(FALSE, FALSE, FALSE, FALSE,  TRUE,  TRUE,  TRUE,  TRUE)
planets_df(has_rings, names)
has_rings <- c(FALSE, FALSE, FALSE, FALSE,  TRUE,  TRUE,  TRUE,  TRUE)
planets_df(has_rings, "name")
has_rings <- c(FALSE, FALSE, FALSE, FALSE,  TRUE,  TRUE,  TRUE,  TRUE)
planets_df(has_rings, "name")
has_rings <- c(FALSE, FALSE, FALSE, FALSE,  TRUE,  TRUE,  TRUE,  TRUE)
planets_df(has_rings, "names")
has_rings <- c(FALSE, FALSE, FALSE, FALSE,  TRUE,  TRUE,  TRUE,  TRUE)
planets_df(has_rings, "names")
has_rings <- c(FALSE, FALSE, FALSE, FALSE,  TRUE,  TRUE,  TRUE,  TRUE)
planets_df(has_rings, "names")
has_rings <- c(FALSE, FALSE, FALSE, FALSE, TRUE,  TRUE, TRUE,TRUE)
planets_df(has_rings, "names")
has_rings <- c(FALSE, FALSE, FALSE, FALSE, TRUE,  TRUE, TRUE,TRUE)
planets_df(has_rings, "names")
str(planets_df)
has_rings <- c(FALSE, FALSE, FALSE, FALSE, TRUE,  TRUE, TRUE,TRUE)
planets_df(has_rings, "name")
has_rings <- c(FALSE, FALSE, FALSE, FALSE, TRUE,  TRUE, TRUE,TRUE)
planets_df[has_rings, "name"]
has_rings <- c(FALSE, FALSE, FALSE, FALSE, TRUE,  TRUE, TRUE,TRUE)
typeof(planets_df[has_rings, "name"])
has_rings <- c(FALSE, FALSE, FALSE, FALSE, TRUE,  TRUE, TRUE,TRUE)
planets_df[has_rings, "name"]
has_rings <- c(FALSE, FALSE, FALSE, FALSE, TRUE,  TRUE, TRUE,TRUE)
planets_df[has_rings, "name"] == 4
has_rings <- c(FALSE, FALSE, FALSE, FALSE, TRUE,  TRUE, TRUE,TRUE)
planets_df[has_rings, "name"] == 8
has_rings <- c(FALSE, FALSE, FALSE, FALSE, TRUE,  TRUE, TRUE,TRUE)
planets_df[has_rings, "name"] == 8
has_rings <- c(FALSE, FALSE, FALSE, FALSE, TRUE,  TRUE, TRUE,TRUE)
planets_df[has_rings, "name"] == 8
has_rings <- c(FALSE, FALSE, FALSE, FALSE, TRUE,  TRUE, TRUE,TRUE)
planets_df[has_rings, "name"] == 4
has_rings <- c(FALSE, FALSE, FALSE, FALSE, TRUE,  TRUE, TRUE,TRUE)
planets_df[has_rings, "name"]
has_rings <- c(FALSE, FALSE, FALSE, FALSE, TRUE,  TRUE, TRUE,TRUE)
planets_df[has_rings, "name"] == "Jupiter"
has_rings <- c(FALSE, FALSE, FALSE, FALSE, TRUE,  TRUE, TRUE,TRUE)
is.vector(planets_df[has_rings, "name"])
has_rings <- c(FALSE, FALSE, FALSE, FALSE, TRUE,  TRUE, TRUE,TRUE)
class(planets_df[has_rings, "name"])
has_rings <- c(FALSE, FALSE, FALSE, FALSE, TRUE,  TRUE, TRUE,TRUE)
planets_df[has_rings, "name"]
has_rings <- c(FALSE, FALSE, FALSE, FALSE, TRUE,  TRUE, TRUE,TRUE)
planets_df[has_rings, "name"]
subset(planets_df, subset = "diameter" < 1)
subset(planets_df, "diameter" < 1)
subset(planets_df, subset = "diameter" < 1)
subset(planets_df, subset = ("diameter" < 1))
subset(planets_df, subset ="diameter" < 1)
subset(planets_df, subset = "diameter" < 1)
has_rings <- c(FALSE, FALSE, FALSE, FALSE, TRUE,  TRUE, TRUE,TRUE)
planets_df[has_rings, "name"]
subset(planets_df, subset = "diameter" < 1)
subset(planets_df, subset = diameter < 1)
subset(planets_df, has_rings = TRUE)
subset(planets_df, subset(has_rings = TRUE))
subset(planets_df, subset = has_rings = TRUE)
subset(planets_df, subset = diamater < 1)
subset(planets_df, subset = diamater < 1)
subset(planets_df, subset = diameter < 1)
subset(planets_df, subset = diameter < 1)
subset(planets_df, diameter < 1)
subset(planets_df, diameter < 1)
subset(planets_df, diameter < 1)
subset(planets_df, rings = TRUE)
subset(planets_df, rings == TRUE)
subset(all_wars_matrix, non-US < 200)
all_wars_matrix
all_wars_matrix[1,]
all_wars_matrix[,1]
all_wars_matrix[1,]
all_wars_matrix[1,"US"]
all_wars_matrix[1,"non-US"]
subset(all_wars_matrix, US > 300)
subset(all_wars_matrix, subset = US > 300)
typeof(all_wars_matrix[,1])
all_wars_matrix[,1]
class(all_wars_matrix[,1])
subset(planets_df, diameter < 1)
typeof(planets_df[,1])
subset(planets_df, diameter < 1)
class(planets_df[,1])
all_wars_matrix
all_wars_matrix
subset.matrix(all_wars_matrix, sum_vector > 500)
subset.matrix(all_wars_matrix, sum_vector > 500)
subset.matrix(all_wars_matrix, sum_vector > 500)
subset.matrix(all_wars_matrix, sum_vector > 500)
subset.matrix(all_wars_matrix, sum_vector > 500)
subset.matrix(all_wars_matrix, sum_vector > 500)
subset(all_wars_matrix, sum_vector > 500)
subset(all_wars_matrix, sum_vector > 500)
subset(all_wars_matrix, sum_vector > 500)
subset(all_wars_matrix, sum_vector > 500)
subset(all_wars_matrix, sum_vector > 500)
subset(all_wars_matrix, US> 300)
subset(all_wars_matrix, sum_vector > 300)
subset(all_wars_matrix, non-US > 300)
subset(all_wars_matrix, US > 300)
subset.matrix(all_wars_matrix, US > 300)
subset.matrix(all_wars_matrix, "US" > 300)
subset.matrix(all_wars_matrix, "US" > 300)
subset.matrix(all_wars_matrix, "US" < 300)
subset.matrix(all_wars_matrix, "US" < 300)
subset.matrix(all_wars_matrix, "US" < 300)
subset.matrix(all_wars_matrix, "US" < 300)
subset(planets_df, diameter < 1)
subset(planets_df, diameter < 1)
class(planets_df[0,3])
subset(planets_df, diameter < 1)
class(planets_df[0,1])
subset(planets_df, diameter < 1)
class(planets_df[0,3])
subset(planets_df, diameter < 1)
is.factor(planets_df[0,3])
subset(planets_df, diameter < 1)
is.factor(planets_df[0,1])
subset(planets_df, diameter < 1)
order(planets_df[,"rotation"])
planet_df[order(planets_df[,"rotation"])]
?factor
# Remember that filtering by matrix synthax needs to use quotation
planets_df[has_rings, "name"]
# But using subset() method, filter term does not need quotation
subset(planets_df, diameter < 1)
?pbinom
# Remember that filtering by matrix synthax needs to use quotation
planets_df[has_rings, name]
# Remember that filtering by matrix synthax needs to use quotation
planets_df[has_rings, "name"]
# But using subset() method, filter term does not need quotation
subset(planets_df, diameter < 1)
planets_df[,1]
planets_df[,2]
new_data <- planets_df
new_data
new_data[,1]
new_data[,2]
levels(new_data[,2]) <- c("TP", "GG")
new_data[]
planets_df[,2]
new_data[,2]
sort(new_data$rotation)
sort(new_data$rotation)
order(new_data$rotation)
new_data
?data.frame
names <- c("a","b","c")
names <- c("z","b","d")
names <- c("z","as","ab")
order(names)
names <- names(order(names))
name
names
names
names(order(names))
names <- names(order(names))
names <- c("z","as","ab")
names
order(names)
names(order(names))
# Remember that filtering by matrix synthax needs to use quotation
planets_df[has_rings, "name"]
# But using subset() method, filter term does not need quotation
subset(planets_df, has_rings == TRUE)
# Remember that filtering by matrix synthax needs to use quotation
planets_df[has_rings, "name"]
# But using subset() method, filter term does not need quotation
subset(planets_df, has_rings == TRUE && rotation > 0)
# Remember that filtering by matrix synthax needs to use quotation
planets_df[has_rings, "name"]
# But using subset() method, filter term does not need quotation
subset(planets_df, has_rings == TRUE AND rotation > 0)
# Remember that filtering by matrix synthax needs to use quotation
planets_df[has_rings, "name"]
# But using subset() method, filter term does not need quotation
subset(planets_df, has_rings == TRUE & rotation > 0)
?list
# Use order() to create vector with order of diameter
positions_vector <- order(planets_df$diameter)
# Note:  Old notation would work such as plaents_df[,"diameter"]
# Use positions to sort planets_df
test_df <- planets_df[positions_vector,]
test_df
sort(c(9,9,1,4,5,444,12,9.00000000000000000001))
?list
# Vector with numerics from 1 up to 10
my_vector <- 1:10
# Matrix with numerics from 1 up to 9
my_matrix <- matrix(1:9, ncol = 3)
# First 10 elements of the built-in data frame mtcars
my_df <- mtcars[1:10,]
# Construct list with these different elements:
my_list <- list(my_vector, my_matrix, my_df)
my_list
my_list$1
my_list[[1]]
my_list$"1"
# Remember the three variables are already declared in the previous example
# these variables are my_vector my_matrix my_df
# Construct list with these different elements:
my_list2 <- list(vec = my_vector, mat = my_matrix, df = my_df)
my_list2
# I will be using the same List data from the previous example called my_list2
# Now, call the second item in the vec variable in the list.
my_list2$vec[2]
# I will be using the same List data from the previous example called my_list2
# Using the $ notation, call the second item in the vec variable in the list.
my_list2$vec[2]
# W/o the $ notation, call the third item in the vec variable in the list.
my_list2[["vec"]][3]
# I will be using the same List data from the previous example called my_list2
# Call the entire mat variable inside our list
my_list2[["mat"]]
# Using the $ notation, call the second item in the vec variable in the list.
my_list2$vec[2]
# W/o the $ notation, call the third item in the vec variable in the list.
my_list2[["vec"]][3]
# I will be using the same List data from the previous example called my_list2
# Call the entire mat variable inside our list
my_list2[["mat"]]
# Using the $ notation, call the second item in the vec variable in the list.
my_list2$vec[2]
# W/o the $ notation, call the third item in the vec variable in the list.
my_list2[["vec"]][3]
# I will be using the same List data from the previous example called my_list2
# Call the entire mat variable inside our list
my_list2$mat
# Using the $ notation, call the second item in the vec variable in the list.
my_list2$vec[2]
# W/o the $ notation, call the third item in the vec variable in the list.
my_list2[["vec"]][3]
# I will be using the same List data from the previous example called my_list2
# Call the entire mat variable inside our list
my_list2$mat
# Using the $ notation, call the second item in the vec variable in the list.
my_list2$vec[2]
# W/o the $ notation, call the third item in the vec variable in the list.
my_list2[["vec"]][3]
year <- 2017
my_list3 <- c(my_list2, year)
# Declaring a year numerical data
year <- 2017
# Combining list and vector to another list
my_list3 <- c(my_list2, year)
# Printing list to verify that info was indeed added
my_list3
# Declaring a year numerical data
year <- 2017
# Combining list and vector to another list
my_list3 <- c(my_list2, yearcompiled = year)
# Printing list to verify that info was indeed added
my_list3
# Declaring a year numerical data
year <- 2017
# Combining list and data to another list, and call that data "yearcompiled" inside the newlist
my_list3 <- c(my_list2, yearcompiled = year)
# Printing list to verify that info was indeed added
my_list3
# Combining list and num variable to another list
my_list3 <- c(my_list2, year = 2017)
# Printing list to verify that info was indeed added
my_list3
# Combining list and num variable to another list
my_list3 <- c(my_list2, year = 2017)
# Printing list to verify that info was indeed added
my_list3
#Verify that year variable exist by using $ notation
my_list3$year
# Comparison of logicals
TRUE == FALSE
# Comparison of numerics
-6 * 14 != 17 - 101
# Comparison of character strings
"useR" == "user"
# Compare a logical with a numeric
TRUE == 1
# Comparison of logicals
TRUE == FALSE
# Comparison of numerics
-6 * 14 != 17 - 101
# Comparison of character strings
"useR" == "user"
# Compare a logical with a numeric
TRUE == 1
(1 + 2) > 4
"dog" < "Cats"
TRUE <= FALSE
(1 + 2) > 4
"dog" < "Cats"
TRUE <= FALSE
# The linkedin and facebook vectors were declared
linkedin <- c(16, 9, 13, 5, 2, 17, 14)
facebook <- c(17, 7, 5, 16, 8, 13, 14)
# On which days did the number of LinkedIn profile views exceed 15?
linkedin > 15
# When was your LinkedIn profile viewed only 5 times or fewer?
linkedin <= 5
# LinkedIn more popular than Facebook
linkedin > facebook
linkedin <- c(16, 9, 13, 5, 2, 17, 14)
facebook <- c(17, 7, 5, 16, 8, 13, 14)
views <- matrix(c(linkedin, facebook), nrow = 2, byrow = TRUE)
views
?colnames
colnames(views, c("Monday", "Tuesday", "Wed", "Thur", "Fri", "Sat", "Sun"))
colnames(views) <- c("Monday", "Tuesday", "Wed", "Thur", "Fri", "Sat", "Sun")
views
rownames(views) <- c("Facebook", "LinkedIn")
views
# The social data has been created for you
linkedin <- c(16, 9, 13, 5, 2, 17, 14)
facebook <- c(17, 7, 5, 16, 8, 13, 14)
views <- matrix(c(linkedin, facebook), nrow = 2, byrow = TRUE)
# When does views equal 13?
views  == 13
# When is views less than or equal to 14?
views <= 14
# The linkedin and last variable are already defined for you
linkedin <- c(16, 9, 13, 5, 2, 17, 14)
last <- tail(linkedin, 1)
# Is last under 5 or above 10?
last < 5 | last > 10
# Is last between 15 (exclusive) and 20 (inclusive)?
last > 15 & last <= 20
# declaring a logical vector
logical_vector <- c(TRUE, FALSE, TRUE)
# count TRUES
sum(logical_vector)
# Variables related to your last day of recordings
medium <- "LinkedIn"
num_views <- 14
# Examine the if statement for medium
if(medium == "LinkedIn"){
print("Showing LinkedIn information")
}
# Variables related to your last day of recordings
medium <- "LinkedIn"
num_views <- 14
# Examine the if statement for medium
if(medium == "LinkedIn"){
print("Showing LinkedIn information")
}
# Write the if statement for num_views
if (num_views > 15) {
print("You're popular!")
} else {
print("Not POPULAR")
}
# Variables related to your last day of recordings
medium <- "LinkedIn"
num_views <- 14
# Control structure for medium
if (medium == "LinkedIn") {
print("Showing LinkedIn information")
} else if (medium == "Facebook") {
print("Showing Facebook information")
} else {
print("Unknown medium")
}
# Control structure for num_views
if (num_views > 15) {
print("You're popular!")
} else if (num_views <= 15 & num_views > 10) {
print("Your number of views is average")
} else {
print("Try to be more visible!")
}
message("hello")
message("hello")
length("al")
?strsplit
