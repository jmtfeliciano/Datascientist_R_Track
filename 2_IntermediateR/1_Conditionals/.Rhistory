}
# PASSING A CUSTOM FUNCTION:  Applies select_first function over split_low and names it 'names'
names <- lapply(split_low, select_first)
names
# PASSING AN ANONYMOUS FUNCTION: Feeds split_low and an anonymous example to lapply.. call the result 'years'
years <- lapply(split_low, select_second)
years
cities <- c("London", "Prague", "Los Angeles", "Berlin")
cities <- c("London", "Prague", "Los Angeles", "Berlin")
# using lapply() to get a vector of characters
unlist(lapply(cities, nchar))
cities <- c("London", "Prague", "Los Angeles", "Berlin")
# using lapply() to get a vector of character number
unlist(lapply(cities, nchar))
# using sapply() to get a vector of character number
sapply(cities, nchar)
sapply(cities, nchar, USE.NAMES = FALSE)
cities <- c("London", "Prague", "Los Angeles", "Berlin")
splitted_cities <- sapply(cities, function (city) {
return(strsplit(city, ""))
}
cities <- c("London", "Prague", "Los Angeles", "Berlin")
splitted_cities <- sapply(cities, function (city) {
return(strsplit(city, "")
})
cities <- c("London", "Prague", "Los Angeles", "Berlin")
splitted_cities <- sapply(cities, function (city) {
return(strsplit(city, ""))
})
cities <- c("London", "Prague", "Los Angeles", "Berlin")
splitted_cities <- sapply(cities, function (city) {
return(strsplit(city, ""))
})
splitted_cities
cities2 <- c("London", "Prague", "Los Angeles", "Berlin")
splitted_cities2 <- sapply(cities, strsplit)
})
splitted_cities2 <- sapply(cities, strsplit)
splitted_cities2 <- sapply(cities, strsplit(,""))
cities <- c("London", "Prague", "Los Angeles", "Berlin")
# A function I created to split city names into individual characters
splitted_cities <- sapply(cities, function (city) {
return(strsplit(city, ""))
})
# Returns the product of sapply()
splitted_cities
# Prints the structure of this data
str(splitted_cities)
max(c(1,2,3,4,5))
max(matrix(c(1,2,3,4,5,6), nrow = 2)
)
cities <- c("London", "Prague", "Los Angeles", "Berlin")
city_sorter <- sapply (cities, function (city) {
return(c(first_letter = city[1], last_letter = city[nchar(city)]))
})
cities <- c("London", "Prague", "Los Angeles", "Berlin")
city_sorter <- sapply (cities, function (city) {
return(c(first_letter = city[1], last_letter = city[nchar(city)]))
})
city_sorter
cities <- c("London", "Prague", "Los Angeles", "Berlin")
city_sorter <- sapply (cities, function (city) {
c(first_letter = city[1], last_letter = city[nchar(city)])
})
city_sorter
cities <- c("London", "Prague", "Los Angeles", "Berlin")
splitted_city <- strsplit("Mexico City", "")
splitted_city[1]
splitted_city[[1]][1]
cities <- c("London", "Prague", "Los Angeles", "Berlin")
city_sorter <- sapply (cities, function (city) {
splitted_city <- strsplit(city, "")[[1]]
c(first_letter = splitted_city[1],
last_letter = splitted_city[length(splitted_city)])
})
city_sorter
# Vector of city
cities <- c("London", "Prague", "Los Angeles", "Berlin")
# Applies an anonymous function via sapply() that determines the first and last letter of city.
city_sorter <- sapply (cities, function (city) {
splitted_city <- strsplit(city, "")[[1]]
c(first_letter = splitted_city[1],
last_letter = splitted_city[length(splitted_city)])
})
city_sorter
profits_weekend <- c(Saturday = c(50,100), Sunday = c(200,100) )
profits_weekend
profits_weekend <- c(week1 = c(50,100), week2 = c(200,100) )
sapply(profits_weekend, mean)
profits_monthly <- c(January = "$2590", February = "$5891" )
sapply(profits_monthly, function(month){
cat("The profit for the month is", month, "\n")
})
profits_monthly <- c(January = "$2590", February = "$5891" )
sapply(profits_monthly, function(month){
print(cat("The profit for the month is", month, "\n"))
})
profits_monthly <- c(January = "$2590", February = "$5891" )
sapply(profits_monthly, function(month){
cat("The profit for the month is", month, "\n")
})
profits_monthly <- c(January = "$2590", February = "$5891" )
message <- sapply(profits_monthly, function(month){
cat("The profit for the month is", month, "\n")
})
profits_monthly <- c(January = "$2590", February = "$5891" )
message <- sapply(profits_monthly, function(month){
cat("The profit for the month is", month, "\n")
})
message
profits_monthly <- c("$2590", "$5891" )
message <- sapply(profits_monthly, function(month){
cat("The profit for the month is", month, "\n")
})
message
profits_monthly <- c("$2590", "$5891" )
message <- lapply(profits_monthly, function(month){
cat("The profit for the month is", month, "\n")
})
message
profits_monthly <- list(January = c(122,218,213,500), February = c(1029,19212, 122))
message <- lapply(profits_monthly, function(month){
cat("The profit for the month is", month, "\n")
})
message
profits_monthly <- list(January = c(122,218,213,500), February = c(1029,19212, 122))
message <- lapply(profits_monthly, function(month){
cat("The mean profit for the month is", mean(month), "\n")
})
message
weekend_profits <- list(January = c(122,218,213,500), February = c(1029,19212, 122))
message <- lapply(weekend_profits, function(month){
cat("The mean profit for the month is", mean(month), "\n")
})
message
cities <- c("London", "Prague", "Los Angeles", "Berlin")
vapply(cities, nchar, numeric(1))
# A vector of cities
cities <- c("London", "Prague", "Los Angeles", "Berlin")
# vapply() with specified numeric(1) input telling vapply that we expect a numeric value for each data
vapply(cities, nchar, numeric(1))
```{r}
```{r}
weekend_profits <- list(January = c(122,218,213,500), February = c(1029,19212, 122))
message <- vapply(weekend_profits, function(month){
cat("The mean profit for the month is", mean(month), "\n")
})
weekend_profits <- list(January = c(122,218,213,500), February = c(1029,19212, 122))
message <- vapply(weekend_profits, function(month){
cat("The mean profit for the month is", mean(month), "\n")
}, NULL)
weekend_profits <- list(January = c(122,218,213,500), February = c(1029,19212, 122))
message <- vapply(weekend_profits, function(month){
cat("The mean profit for the month is", mean(month), "\n")
}, FUN.VALUE = NULL)
weekend_profits <- list(January = c(122,218,213,500), February = c(1029,19212, 122))
message <- vapply(weekend_profits, function(month){
cat("The mean profit for the month is", mean(month), "\n")
}, FUN.VALUE = c())
cities <- c("London", "Prague", "Los Angeles", "Berlin")
city_sorter <- sapply (cities, function (city) {
splitted_city <- strsplit(city, "")[[1]]
c(first_letter = splitted_city[1],
last_letter = splitted_city[length(splitted_city)])
}, character(2))
cities <- c("London", "Prague", "Los Angeles", "Berlin")
city_sorter <- vapply (cities, function (city) {
splitted_city <- strsplit(city, "")[[1]]
c(first_letter = splitted_city[1],
last_letter = splitted_city[length(splitted_city)])
}, character(2))
cities <- c("London", "Prague", "Los Angeles", "Berlin")
# we modified the earlier sapply function with the added character(2) argument
city_sorter <- vapply (cities, function (city) {
splitted_city <- strsplit(city, "")[[1]]
c(first_letter = splitted_city[1],
last_letter = splitted_city[length(splitted_city)])
}, character(2))
city_sorter
# modified from above, now called city_sorter_2 with incorrect expected return value from callback function
city_sorter_2 <- vapply (cities, function (city) {
splitted_city <- strsplit(city, "")[[1]]
c(first_letter = splitted_city[1],
last_letter = splitted_city[length(splitted_city)])
}, character(1))
args(vapply)
vapply?
?
;
?vapply
price_vector <- c(eggroll = 2.50, boba = 1.50, popcorn_chicken = 5)
new_price_with_tax <- vapply(price_vector, function (price) {
price * 1.10 * (1 + tax)
}, tax = 0.0625, numerical(1))
price_vector <- c(eggroll = 2.50, boba = 1.50, popcorn_chicken = 5)
new_price_with_tax <- vapply(price_vector, function (price) {
price * 1.10 * (1 + tax)
}, tax = 0.0625, numeric(1))
price_vector <- c(eggroll = 2.50, boba = 1.50, popcorn_chicken = 5)
new_price_with_tax <- vapply(price_vector, function (price, tax) {
price * 1.10 * (1 + tax)
}, tax = 0.0625, numeric(1))
# old price vector
price_vector <- c(eggroll = 2.50, boba = 1.50, popcorn_chicken = 5)
# new price vector with 10% price increase and tax inclusion
new_price_with_tax <- vapply(price_vector, function (price, tax) {
price * 1.10 * (1 + tax)
}, tax = 0.0625, numeric(1))
# old price vector
price_vector <- c(eggroll = 2.50, boba = 1.50, popcorn_chicken = 5)
# new price vector with 10% price increase and tax inclusion
new_price_with_tax <- vapply(price_vector, function (price, tax) {
price * 1.10 * (1 + tax)
}, tax = 0.0625, numeric(1))
# prints the updated price with 10% increase and the tax rate as an argument to the vapply()
new_price_with_tax
# old price vector
price_vector <- c(eggroll = 2.50, boba = 1.50, popcorn_chicken = 5)
# new price vector with 10% price increase and tax inclusion
new_price_with_tax <- vapply(price_vector, function (price, tax) {
round(price * 1.10 * (1 + tax), 2)
}, tax = 0.0625, numeric(1))
# prints the updated price with 10% increase and the tax rate as an argument to the vapply()
new_price_with_tax
seq(1,10,4)
TRUE
^TRUE
?grepl
?grepl
text <- c("ass", "als", "ald", "cdd")
args(grepl)
grepl("a?s", text)
grep("a?s", text)
sub("s", text)
sub("s", "*", text)
gsub("s", "*", text)
str(data.frame)
str(matrix)
number_vector <- c(1,9,5,0)
rev(number_vector)
number_vector <- c(1,9,5,0)
# reverses the order of any given vector
rev(number_vector)
str(seq)
?seq
# Prints a sequence:
# ?seq gives:  seq(from = 1, to = 1, by = ((to - from)/(length.out - 1)), length.out = NULL, along.with = NULL, ...)
seq(1,100, 2)
# Prints a sequence: from 1 up to 100
# ?seq gives:  seq(from = 1, to = 1, by = ((to - from)/(length.out - 1)), length.out = NULL, along.with = NULL, ...)
seq(0,100, 2)
# Prints a sequence: from 1 up to 100 by increments of 2
# ?seq gives:  seq(from = 1, to = 1, by = ((to - from)/(length.out - 1)) ...)
seq(0,100, 2)
# Prints a sequence: from 1 up to 20 by increments of 2
# ?seq gives:  seq(from = 1, to = 1, by = ((to - from)/(length.out - 1)) ...)
seq(0,20, 2)
str(seq)
?seq
str(rep)
?rep
# Print a sequence: from 1 up to 20 by increments of 2
# ?seq gives:  seq(from = 1, to = 1, by = ((to - from)/(length.out - 1)) ...)
seq(from = 0, to = 20, by = 2)
# Repeat a list twice
list(c(1,2,3), )
# Print a sequence: from 1 up to 20 by increments of 2
# ?seq gives:  seq(from = 1, to = 1, by = ((to - from)/(length.out - 1)) ...)
seq(from = 0, to = 20, by = 2)
# Repeat a list twice
# ?rep shows:  rep(x, times = 1, length.out = NA, each = 1)
rep(c(1,2,3), 2)
# Print a sequence: from 1 up to 20 by increments of 2
# ?seq gives:  seq(from = 1, to = 1, by = ((to - from)/(length.out - 1)) ...)
seq(from = 0, to = 20, by = 2)
# Repeat a list twice
# ?rep shows:  rep(x, times = 1, length.out = NA, each = 1)
rep(c(1,2,3), each = 2)
# Print a sequence: from 1 up to 20 by increments of 2
# ?seq gives:  seq(from = 1, to = 1, by = ((to - from)/(length.out - 1)) ...)
seq(from = 0, to = 20, by = 2)
# Repeat a list twice
# ?rep shows:  rep(x, times = 1, length.out = NA, each = 1)
rep(c(1,2,3), times = 2, each = 2)
# Print a sequence: from 1 up to 20 by increments of 2
# ?seq gives:  seq(from = 1, to = 1, by = ((to - from)/(length.out - 1)) ...)
seq(from = 0, to = 20, by = 2)
# Repeat a list twice
# ?rep shows:  rep(x, times = 1, length.out = NA, each = 1)
rep(c(1,2,3), times = 3)
# Print a sequence: from 1 up to 20 by increments of 2
# ?seq gives:  seq(from = 1, to = 1, by = ((to - from)/(length.out - 1)) ...)
seq(from = 0, to = 20, by = 2)
# Repeat a list twice (a,b,a,b) with each appending at the end
# ?rep shows:  rep(x, times = 1, length.out = NA, each = 1)
rep(c(1,2,3), times = 3)
# Repeat a list twice but copy is next to original
rep(c("a", "b"), each = 2)
str(append)
# Print a sequence: from 1 up to 20 by increments of 2
# ?seq gives:  seq(from = 1, to = 1, by = ((to - from)/(length.out - 1)) ...)
seq(from = 0, to = 20, by = 2)
# Repeat a list twice (a,b,a,b) with each appending at the end
# ?rep shows:  rep(x, times = 1, length.out = NA, each = 1)
rep(c(1,2,3), times = 3)
# Repeat a list twice but copy is next to original
rep(c("a", "b"), each = 2)
# Combine 2 list in index 3 of the first list
# str(append) gives: function (x, values, after = length(x))
append(c(1,2,3,4,5), c("a", "b"), after = 3)
# Print a sequence: from 1 up to 20 by increments of 2
# ?seq gives:  seq(from = 1, to = 1, by = ((to - from)/(length.out - 1)) ...)
seq(from = 0, to = 20, by = 2)
# Repeat a list twice (a,b,a,b) with each appending at the end
# ?rep shows:  rep(x, times = 1, length.out = NA, each = 1)
rep(c(1,2,3), times = 3)
# Repeat a list twice but copy is next to original
rep(c("a", "b"), each = 2)
# Combine 2 list in index 3 of the first list
# str(append) gives: function (x, values, after = length(x))
append(c(1,2,3,4,5), c("a", "b"), after = 2)
# Print a sequence: from 1 up to 20 by increments of 2
# ?seq gives:  seq(from = 1, to = 1, by = ((to - from)/(length.out - 1)) ...)
seq(from = 0, to = 20, by = 2)
# Print a sequence from 10 to 0 by increments of -2
seq(20, 0, -2)
# Repeat a list twice (a,b,a,b) with each appending at the end
# ?rep shows:  rep(x, times = 1, length.out = NA, each = 1)
rep(c(1,2,3), times = 3)
# Repeat a list twice but copy is next to original
rep(c("a", "b"), each = 2)
# Combine 2 list in index 3 of the first list
# str(append) gives: function (x, values, after = length(x))
append(c(1,2,3,4,5), c("a", "b"), after = 2)
# Print a sequence: from 1 up to 20 by increments of 2
# ?seq gives:  seq(from = 1, to = 1, by = ((to - from)/(length.out - 1)) ...)
seq(from = 0, to = 20, by = 2)
# Print a sequence from 10 to 0 by increments of -2
seq(10, 0, -0.5)
# Repeat a list twice (a,b,a,b) with each appending at the end
# ?rep shows:  rep(x, times = 1, length.out = NA, each = 1)
rep(c(1,2,3), times = 3)
# Repeat a list twice but copy is next to original
rep(c("a", "b"), each = 2)
# Combine 2 list in index 3 of the first list
# str(append) gives: function (x, values, after = length(x))
append(c(1,2,3,4,5), c("a", "b"), after = 2)
# Print a sequence: from 1 up to 20 by increments of 2
# ?seq gives:  seq(from = 1, to = 1, by = ((to - from)/(length.out - 1)) ...)
seq(from = 0, to = 20, by = 2)
# Print a sequence from 10 to 5 by increments of -0.5
seq(10, 5, -0.5)
# Repeat a list twice (a,b,a,b) with each appending at the end
# ?rep shows:  rep(x, times = 1, length.out = NA, each = 1)
rep(c(1,2,3), times = 3)
# Repeat a list twice but copy is next to original
rep(c("a", "b"), each = 2)
# Combine 2 list in index 3 of the first list
# str(append) gives: function (x, values, after = length(x))
append(c(1,2,3,4,5), c("a", "b"), after = 2)
# Two vectors of interest.  The sum of all items is 8 by inspection
vec1 <- c(1,1,1,1,1)
vec2 <- c(1,2)
# The incorrect way:
sum(vec1 + vec2)
# Two vectors of interest.  The sum of all items is 8 by inspection
vec1 <- c(1,1,1,1,1)
vec2 <- c(1,2)
# The incorrect way and R will give an answer with an R.
vec1 + vec2
sum(vec1 + vec2)
# The p
# Two vectors of interest.  The sum of all items is 8 by inspection
vec1 <- c(1,1,1,1,1)
vec2 <- c(1,2)
# The incorrect way and R will give an answer with an error.  dim vec 1 =/= dim vec2
sum(vec1 + vec2)
# Two correct ways:
sum(c(vec1, vec2))
sum(vec1) + sum(vec2)
# Two vectors of interest.  The sum of all items is 8 by inspection
vec1 <- c(1,1,1,1,1)
vec2 <- c(1,2)
# The incorrect way and R will give an answer with an error.  dim vec 1 =/= dim vec2
sum(vec1 + vec2)
# Two correct ways:
sum(c(vec1, vec2))
sum(vec1) + sum(vec2)
# The emails vector has already been defined for you
emails <- c("john.doe@ivyleague.edu", "education@world.gov", "dalai.lama@peace.org",
"invalid.edu", "quant@bigdatacollege.edu", "cookie.monster@sesame.tv")
# Use grepl() to match for "edu"
grepl("edu", emails)
# Use grep() to match for "edu", save result to hits
hits <- grep("edu", emails)
# Subset emails using hits
emails[hits]
# vector named emails was already declared in the preceding R script
# Use grepl() to match for the more specific filter
grepl("@.*\\.edu", emails)
# vector named emails was already declared in the preceding R script
# Use grepl() to match for the more specific filter
grepl("@.*\.edu", emails)
# The emails vector
emails <- c("john.doe@ivyleague.edu", "education@world.gov", "global@peace.org",
"invalid.edu", "quant@bigdatacollege.edu", "cookie.monster@sesame.tv")
# Using sub:
sub("@.*\\.edu", "@test\\.edu", emails)
sub("([A-z]+)", "000000", "1299")
sub("([A-z]+)", "000000", "12B99")
sub("([A-z]+)", "000000", "12B99z")
gsub("([A-z]+)", "000000", "12B99z")
sub("A([A-z]+)", "000000", "12B99z")
sub("A([A-z]+)", "000000", "12AB99Az")
gsub("A([A-z]+)", "000000", "12AB99Az")
sub("A[A-z]+", "000000", "12B99z")
gsub("A([A-z]+)", "000000", "12AB99Az")
# Replace parts with AA .. Az with "000000" using gsub
gsub("A([A-z]+)", "\\1", "12AB99Az")
# Replace parts with AA .. Az with "000000" using gsub
gsub("([A-z]+)", "\\1", "12AB99Az")
# Replace parts with AA .. Az with "000000" using gsub
gsub("([A-z]+)", "\\1", "12AB99Az")
# Replace parts with AA .. Az with "000000" using gsub
gsub("([A-z]+)", "00", "12AB99Az")
# Replace parts with AA .. Az with "000000" using gsub
gsub("([A-z]+)", "\\1", "12AB99Az")
# Replace parts with AA .. Az with "000000" using gsub
gsub("([A-z]+)", "\\10", "12AB99Az")
# Replace parts with AA .. Az with "000000" using gsub
gsub("A[A-z]", "\\10", "12AB99Az")
# Replace parts with AA .. Az with "000000" using gsub
gsub("A[A-z]", "\\1", "12AB99Az")
# Replace parts with AA .. Az with "000000" using gsub
gsub("A[A-z]", "\\1", "12AB99Az")
# Replace parts with AA .. Az with "000000" using gsub
gsub("A([A-z])", "\\1", "12AB99Az")
# Replace parts with AA .. Az with the second letter only (A...z)
gsub("A([A-z])", "\\1", "12AB99Az")
# a vector called awards with dummy data on number of nominations
awards <- c("Won 1 Oscar. Another 9 wins & 24 nominations.",
"1 win and 2 nominations.",
"2 wins & 3 nominations.",
"Nominated for 2 Golden Globes. 1 more win & 2 nominations.",
"4 wins & 1 nomination.")
nominations <- sub(".*\\s([0-9]+)\\snomination.*$", "\\1", awards)
# a vector called awards with dummy data on number of nominations
awards <- c("Won 1 Oscar. Another 9 wins & 24 nominations.",
"1 win and 2 nominations.",
"2 wins & 3 nominations.",
"Nominated for 2 Golden Globes. 1 more win & 2 nominations.",
"4 wins & 1 nomination.")
nominations <- sub(".*\\s([0-9]+)\\snomination.*$", "\\1", awards)
nominations
?sys
sys
Sys
search()
Sys.Date()
unclass(Sys.Date())
# Get the current date: today
today <- Sys.Date()
# Get the current time: now
now <- Sys.time()
# Get the current date: today
today <- Sys.Date()
# Get the current time: now
now <- Sys.time()
# Get the current date: today
today <- Sys.Date()
# Get the current time: now
now <- Sys.time()
# Get the current date: today
today <- Sys.Date()
# Get the current time: now
now <- Sys.time()
# Get the current date: today
today <- Sys.Date()
# Get the current time: now
now <- Sys.time()
# Get the current date: today
today <- Sys.Date()
today
# Get the current time: now
now <- Sys.time()
now
# 3 different date formats we have as string and converting them to unix timestamp
date_char1 <- "1982-01-13"
as.Date(date_char1)
date_char2 <- "Jan-13-82"
as.Date(data_char2, format = "%b-%d-%y")
# 3 different date formats we have as string and converting them to unix timestamp
date_char1 <- "1982-01-13"
as.Date(date_char1)
date_char2 <- "Jan-13-82"
as.Date(date_char2, format = "%b-%d-%y")
date_char3 <- "13 January, 1982"
as.Date(date_char3, format = "%d %B, %Y")
unclass(Sys.time())
unclass(Sys.Date())
class(Sys.Date())
class(Sys.time())
# 3 different date formats we have as string and converting them to unix timestamp
date_char1 <- "1982-01-13"
as.Date(date_char1)
date_char2 <- "Jan-13-82"
as.Date(date_char2, format = "%b-%d-%y")
date_char3 <- "13 January, 1982"
to_format <- as.Date(date_char3, format = "%d %B, %Y")
# Suppose we want to print to_format, which is now Date object as "MM YY" format
format(to_format, "%m %y")
?format
